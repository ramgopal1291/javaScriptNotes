Generators (or generator functions) :- ES6 introduced a new way of working with functions and iterators in the form of Generators.

	A generator is a function that can stop midway and then continue from where it stopped.
	A generator is a function that produces a sequence of results instead of a single value, i.e you generate ​a series of values.
	When called, generator functions do not initially execute their code. Instead, they return a special type of iterator, called a Generator. When a value is consumed by calling the generator's next method, the Generator function executes until it encounters the yield keyword.

“use strict”
The directive looks like a string: "use strict" or 'use strict'. When it is located at the top of a script, the whole script works the “modern” way.

Objects :- In JavaScript, an object is a standalone entity, with properties and type. Compare it with a car, for example. A car is an object, with properties. A car has a color, a design, weight, a material it is made of.

	var person = {
		firstName: "John",
		lastName : "Doe",
		id       : 5566,
		fullName : function() {
			return this.firstName + " " + this.lastName;
		}
	};
	name = person.fullName();
	name = person.fullName;
	console.log(name);
	------------------------------------------------
	
	class Animal {
	  constructor(name) {
		this.name = name;
	  }

	  speak() {
		console.log(`${this.name} makes a noise.`);
	  }
	}

	class Dog extends Animal {
	  constructor(name) {
		super(name); // call the super class constructor and pass in the name parameter
	  }

	  speak() {
		console.log(`${this.name} barks.`);
	  }
	}

	let d = new Dog('Mitzie');
	d.speak(); // Mitzie barks.
	
	--------------------------------------------------
		
Callback :- A callback is a function passed into another function as an argument to be executed later.
		Callback functions can be synchronous or asynchronous.

-------------------------------------------------------

Shallow copy Vs Deep copy

Shallow copy :  Coping on top level elements
Deep Copy :  Copying nested elements

var array = ['ram', 'shyam', 'krishna'];
var arrayNew = array;
	arrayNew[0] = '100';

console.log(arrayNew, array);


var car = {
	size = '100%',
	owner = 'ram',
	isACorNonAC = true
}

var otherCar = car;

otherCar.model = '0%';
car.isACorNonAC = false;

console.log(otherCar, car);


//Array Shallow Copy

1. Array.concate(array1);

var originalArray = ['100', '200', '300', {'a', 'hello'}]

2. Array.from(array1);

3. Array.slice(0);

4. Spread Operator [...];


//Array Deep Copy

1. JSON.parse(JSON.stringify(array1));


-------------------------------------------

//Object Shallow Copy

1. Object.assign({}, sourceObj);

2. Spread Operator = {...Obj};

//Object Deep Copy

1. JSON.parse(JSON.stringify(Obj));

Question :- Remove duplicate values from JS array

	1. uniq = [...new Set(array)];
	2. var names = ["Mike","Matt","Nancy","Adam","Jenny","Matt","Nancy","Carl"];

		let uniqueChars = names.filter((c, index) => {
			return names.indexOf(c) === index;
		});

		console.log(uniqueChars)

Q2. What is JavaScript?
Ans: 

Q3. What are the data types supported by JavaScript?
Ans: The data types supported by JavaScript are:

	Undefined
	Null
	Boolean
	String
	Symbol
	Number
	Object

Q4. What are the features of JavaScript?
Ans: It is a lightweight, interpreted programming language.

Q5. Is JavaScript a case-sensitive language?
Ans: Yes, JavaScript is a case sensitive language.

Q6. What are the advantages of JavaScript?

Q7. How can you create an object in JavaScript?
	JavaScript supports Object concept very well. You can create an object using the object literal as follows −

	var emp = {
		name: "Daniel",
		age: 23
	};

Q8. How can you create an Array in JavaScript?
	You can define arrays using the array literal as follows-

	var x = [];
	var y = [1, 2, 3, 4, 5];

Q9. What is a name function in JavaScript & how to define it?
	A named function declares a name as soon as it is defined. It can be defined using function keyword as :

	function named(){
	// write code here
	}

Q11. What is argument objects in JavaScript & how to get the type of arguments passed to a function?
Ans: JavaScript variable arguments represents the arguments that are passed to a function. Using typeof operator, we can get the type of arguments passed to a function. For example −

	function func(x){
		console.log(typeof x, arguments.length);
	}

	func(); //==> "undefined", 0
	func(7); //==> "number", 1
	func("1", "2", "3"); //==> "string", 3

Q15. What is Closure? Give an example.
Ans:- Closures are created whenever a variable that is defined outside the current scope is accessed from within some inner scope.
	It gives you access to an outer function’s scope from an inner function. In JavaScript, closures are created every time a function is created. 
	To use a closure, simply define a function inside another function and expose it.

Q18. How does TypeOf Operator work?
Ans:- The typeof operator is used to get the data type of its operand. 
	The operand can be either a literal or a data structure such as a variable, a function, or an object. 
	It is a unary operator that is placed before its single operand, which can be of any type. 
	Its value is a string indicating the data type of the operand

Q19. How to create a cookie using JavaScript?
Ans:- The simplest way to create a cookie is to assign a string value to the document.cookie object.

Q21. How to delete a cookie using JavaScript?

Q25. What are the ways to define a variable in JavaScript?
Ans:- The three possible ways of defining a variable in JavaScript are:

Q27. What is the difference between Local storage & Session storage?
Ans:- Local Storage – The data is not sent back to the server for every HTTP request (HTML, images, JavaScript, CSS, etc) – reducing the amount of traffic between client and server. It will stay until it is manually cleared through settings or program.
	  Session Storage – It is similar to local storage; the only difference is while data stored in local storage has no expiration time, data stored in session storage gets cleared when the page session ends. Session Storage will leave when the browser is closed.


https://www.edureka.co/blog/interview-questions/javascript-interview-questions/
Major Points as discussed:
 https://github.com/sudheerj/reactjs-interview-questions


javascript

prototype , ES6 -class
closure, curry function
ES6 array iterate - es6 - map, filter
generator - redux saga
api calling, axios, fetch
local storage v/s session storage
polyfills - good to know


React
functional, class component, props, state, presentational/dumb
props -> child, prop drilling - context api, state management - redux, mobx, HOCs, Pure Componet

redux functionality-, middleware - thunk, saga
hooks - useState, redux - useDispatch(),

useMemo();
debounce, throttle
Reconcilation,
React diffing algorithm - React Fibre

Q1:- What is Diffing Algorithm ?
Ans:- React uses virtual DOM which is a lightweight version of the DOM. The only difference is the ability to write the screen like the real DOM, in fact, a new virtual DOM is created after every re-render. DOM stores the components of a website in a tree structure.

How DOM updates in React:

1. On the first run, both virtual DOM and real DOM tree are created
2. React works on observable patterns, hence, whenever there is a change in the state, it updates the nodes in the virtual DOM
3. Then, react compares virtual DOM with the real DOM and updates the changes. This process is called reconciliation.

React uses a heuristic algorithm called the Diffing algorithm for reconciliation based on these assumptions:

Elements of different types will produce different trees
We can set which elements are static and do not need to be checked.


React checks the root elements for changes and the updates depend on the types of the root elements,

Element in different types:-

Whenever the type of the element changes in the root, react will scrap the old tree and build a new one i.e a full rebuild of the tree.

Elements of the same type:-

When the type of changed element is the same, React then checks for attributes of both versions and then only updates the node which has changes without any changes in the tree. The component will be updated in the next lifecycle call.


Note: This is the reason why we should always use unique keys in the elements so that it will be easy for React to determine changes in the elements.

useState(),
this.setState(() => {
})


Redux - components, reselect, redux-persist
html - 5 -features
Css- Box model, flex model, grid model,
postion: auto| relative| absolute| fixed| static - difference- flow of document

------------------------------

Please find below set of questions with sample answers that were being asked by client today. Please go through these and look for more details as well. Mostly questions are present in the link that I had shared - https://github.com/sudheerj/reactjs-interview-questions
So I am again repeating, please go through all the questions present in this link.


1. How to prevent re-rendering in both functional and class component
Functional Component - use React.memo.
Class Component - use React.PureComponent. For regular Class components, you can make use of shouldComponentUpdate() lifecycle hook

2. How to deploy react application in another machine.
For deployment, we have to create a react build. If using CRA, we can directly run 'npm run build' else we have to configure webpack manually for creating the build. The generated build can be deployed to any web server

3. What is the workflow of react and how it render component, like if hello world is rendered then how it is actually working -
Please go through this - https://blog.isquaredsoftware.com/2020/05/blogged-answers-a-mostly-complete-guide-to-react-rendering-behavior/

4. How can you manage states in overall application -  A state management library like Redux can be used. Alternative like Mobx can also be used but you can tell them that you have only worked with redux if you have not used mobx and can work on that if required.

5. Apart from redux , is there any alternative - Mobx, Context API with react hooks, Relay+graphql

6. In which case, you will use functional component and in which case, you will use class component-
Earlier when React hooks were not present, Functional components were used for stateless components. Class components were used where the component had to maintain their own local state. But with the React hooks, local state can also be maintained inside functional components as well.

7. Diff between functional and class component - See point #6. other small things are: class components have a render() member whereas FCs directly return the JSX. No lifecycle methods in FCs but things can be achieved using useEffect() hook.

8. What is npm start command and how it work? 
When you issue the command npm start from the root directory of your project, node will look for a ‘scripts’ object in your package.json file. If found, it will look for a script with the key ‘start’ and run the command specified as its value.
If your package.json does not have any scripts object or if the scripts object does not have a start key, it will run the command ‘node server.js’ instead.

9. Apart from npm start, can you use other commands to start the application- if using yarn, we can use 'yarn run start'.

Q1. How to prevent re-rendering in both functional and class component.
Q2. What is the workflow of react and how it render component, like if hello world is rendered then how it is actually working
Q3. How can you manage states in overall application.
Q4. In which case, you will use functional component and in which case, you will use class component.
Q5.react supports server-side rendering or client-side rendering .
# With create react app, you need to prefix REACT_APP_ to the variable name

Q8: What is react hooks?
Ans:- Hooks are the new feature introduced in the React 16.8 version. It allows you to use state and other React features without writing a class. Hooks are the functions which "hook into" React state and lifecycle features from function components. It does not work inside classes.

Q9: What is redux in React?
Ans:- React Redux is the official React UI bindings layer for Redux. It lets your React components read data from a Redux store, and dispatch actions to the store to update state.

Q10: What is action Redux?
Ans: Actions are the only source of information for the store as per Redux official documentation. It carries a payload of information from your application to store. As discussed earlier, actions are plain JavaScript object that must have a type attribute to indicate the type of action performed.

Q11: What are React functional components?
Ans:- A React functional component is a simple JavaScript/ES6 function that accepts props and returns a React element(JSX).After the introduction of React Hooks, writing functional components has become the ​standard way of writing React components in modern applications.

Q6. Can web browsers read JSX directly? 
Ans:- 1. Web browsers cannot read JSX directly. This is because they are built to only read regular JS objects and JSX is not a regular JavaScript object

    2. For a web browser to read a JSX file, the file needs to be transformed into a regular JavaScript object. For this, we use Babel.

Q7. What is the virtual DOM?
Ans:- DOM stands for Document Object Model. The DOM represents an HTML document with a logical tree structure. Each branch of the tree ends in a node, and each node contains objects.

    React keeps a lightweight representation of the real DOM in the memory, and that is known as the virtual DOM. When the state of an object changes, the virtual DOM changes only that object in the real DOM, rather than updating all the objects.

Q8. What are React controlled components and uncontrolled components?


Q9. How to loop inside JSX?
Q9. What is useMemo() hooks?
Q9. What is useCallback() hooks?
Q9. What is React.Memo() hooks?

Q16: What are the lifecycle methods of ReactJS class components?
Answer:-
    componentWillMount:- Executed before rendering and is used for App level configuration in your root component.
    componentDidMount:- Executed after first rendering and here all AJAX requests, DOM or state updates, and set up eventListeners should occur.
    componentWillReceiveProps:- Executed when particular prop updates to trigger state transitions.
    shouldComponentUpdate:- Determines if the component will be updated or not. By default it returns true. If you are sure that the component doesn't need to render after state or props are updated, you can return false value. It is a great place to improve performance as it allows you to prevent a rerender if component receives new prop.

    componentWillUpdate:- Executed before re-rendering the component when there are pros & state changes confirmed by shouldComponentUpdate which returns true.
    componentDidUpdate:- Mostly it is used to update the DOM in response to prop or state changes.
    componentWillUnmount:- It will be used to cancel any outgoing network requests, or remove all event listeners associated with the component.

Q17: What are the different phases of ReactJS component lifecycle?

Answer:-
    There are four different phases of React component’s lifecycle:

    Initialization: In this phase react component prepares setting up the initial state and default props.
    Mounting: The react component is ready to mount in the browser DOM. This phase covers componentWillMount and componentDidMount lifecycle methods.
    Updating: In this phase, the component get updated in two ways, sending the new props and updating the state. This phase covers shouldComponentUpdate, componentWillUpdate and componentDidUpdate lifecycle methods.
    Unmounting: In this last phase, the component is not needed and get unmounted from the browser DOM. This phase include componentWillUnmount lifecycle method.


Q20: What is prop drilling and how can you avoid it?
Answer:-
    When building a React application, there is often the need for a deeply nested component to use data provided by another component that is much higher in the hierarchy. The simplest approach is to simply pass a prop from each component to the next in the hierarchy from the source component to the deeply nested component. This is called prop drilling.

    The primary disadvantage of prop drilling is that components that should not otherwise be aware of the data become unnecessarily complicated and are harder to maintain.

    To avoid prop drilling, a common approach is to use React context. This allows a Provider component that supplies data to be defined, and allows nested components to consume context data via either a Consumer component or a useContext hook.

Q21: What is StrictMode in React?
Answer:-
    React's StrictMode is sort of a helper component that will help you write better react components, you can wrap a set of components with <StrictMode /> and it'll basically:

    Verify that the components inside are following some of the recommended practices and warn you if not in the console.
    Verify the deprecated methods are not being used, and if they're used strict mode will warn you in the console.
    Help you prevent some side effects by identifying potential risks.

Q25: Why we should not update state directly?
Answer:-
    If you try to update state directly then it won’t re-render the component.

    //Wrong
    This.state.message =”Hello world”;
    Instead use setState() method. It schedules an update to a component’s state object. When state changes, the component responds by re-rendering

    //Correct
    this.setState({message: ‘Hello World’});
    Note: The only place you can assign the state is constructor.

Q29: Explain why and when would you use useMemo()?

Q36: What's the difference between useCallback and useMemo in practice?
Answer:- 
    useMemo:- The useMemo hook is used in the functional component of React to return a memoized value.
                will remember the returned value from your function.

    useCallback:- By using useCallback, you can prevent unnecessarily re-rendering components by returning the same instance of the function that is passed instead of creating a new one each time.
    The useCallback hook is used when a child component is rerendering over and over again without any need.
    Passing an array of dependencies and a memorialized callback will result in a memoized version of the callback that is only modified when any dependence changes.
                will remember your actual function.


Q37: When is it important to pass props to super(), and why?

Q39: When would you use StrictMode component in React?
Q43: What is React Fiber?

Q44: What is a Pure Function?
Answer:- A Pure Function is a function (a block of code) that always returns the same result if the same arguments are passed. It does not depend on any state or data change during a program's execution. Rather, it only depends on its input arguments.

Q2: How to access DOM elements in React?
    Answer:-
    One of the useful application of the useRef() hook is to access DOM elements. This is performed in 3 steps:

    Define the reference to access the element const elementRef = useRef();
    Assign the reference to ref attribute of the element: <div ref={elementRef}></div>;
    After mounting, elementRef.current points to the DOM element.

Q3: How to call loading function with React useEffect only once?

Q12: What is the difference between mapStateToProps() and mapDispatchToProps()?
    mapStateToProps()	                                                            mapDispatchToProps()
    1. It is a function that is used to provide the stored data to the component.	    It is a function that is used to provide the action creators with props to the component.
    2. All the results of mapStateToProps() should 
    be the plain object that will later be merged into the component’s prop.	        By mapDispatchToProps(), all the action creators are wrapped in the dispatcher call so that they may be called upon directly and will be merged into the component’s prop.
    3. It is used to connect the redux state to the props of the react component.	    It is used to connect redux actions to the react props.

Q13: Do you need to keep all component states in the Redux store?
Ans:- You do not need to push everything in the redux store as you have to keep your 
    application state as small as possible. You should only do it if it makes a difference
    to you to keep something there or maybe helping you in making your life easier while using Dev Tools.

Q14: What is Redux DevTools? Also, explain the features of Redux DevTools?
Ans:- Some of the major features of Redux DevTools are as follows:

    Redux DevTools is nothing but a time travel environment that makes it possible for us to live edit in Redux with a variety of functionalities like action replay, hot reloading, and customizable UI.
    Redux DevTools makes it possible for us to inspect all the states and action payload. We can go back into the time simply by cancelling the actions.
    Each stage action is re-evaluated in case we change the code of the reducer.
    We can also continue our debug sessions across page reloads with the help of persistState() store enhancer

Q15. What is an action in Redux?
Ans:- Actions are the plain JavaScript objects which contain a type field. Action can be considered as an event that can describe something that has happened in the application.
    Always remember actions should contain a small amount of information that is needed to mention what has happened.

Q10: How to structure Redux top-level directories?
Ans:- All the applications have multiple top-level directories as mentioned below:

    Components: it is used for “dumb” React components that are unfamiliar with Redux.
    Containers: It is used for “smart” React components which are connected to the Redux.
    Actions: It is used for all the action creators, where the file name should be corresponding to the part of the app.
    Reducers: It is used for all the reducers where the file name is corresponding to the state key.
    Store: it is used for store initialization. This directory works best in small and mid-level size apps.

Q11: How many Ways to use useEffect() in ReactJS?
Ans:- It’s a hook that lets do side effects inside function components. It takes a function as a first argument, and an array of dependencies as the second:

    React.useEffect(fn, [deps])

    When and How to Use It:

    It slightly differs from the class component lifecycle methods. The main difference is that lifecycle methods always have the reference to the latest state, while useEffect() will cash the state, handlers and effects of each render, and it will be different from the next one.
    But the good thing is that you can manipulate when to call the function inside useEffect() by specifying a dependency list or none.

    I think of 4 possible ways to call the method:

    1. once, when component mounts
    2. on every component render
    3. on every component render with a condition
    4. when component unmounts

    1. When Component Mounts:-

    Usually, you would like to use it for fetching data or adding event listeners.
    To run the function once, add an empty dependency list. If there are no dependencies in it, that means it will stay the same all the time, and will not call the function again.

    function MyComponent() {
        // ...
        React.useEffect(() => {
            callMeOnlyOnce()
        }, [])
        // ...
    }

    2. On Every Component Render:-

    This happens for every render, including the first one.

    Without the second parameter, the useEffect hook will be called on every render of the component which can be dangerous.

    To call the function on each component render, skip adding the dependency list. No list, nothing to compare against, that means run the effect every time.
    function MyComponent() {
        // ...
        React.useEffect(() => {
            runThisFunctionOnEveryRender();
        })
        // ...
    }

    3. On Every Component Render with a Condition:-

    To call a function conditionally, specify the list of dependencies.
    And the rule of thumb is to always add those dependencies that you are using inside the useEffect().
    function MyComponent() {
        // ...
        React.useEffect(() => {
            runIfOneOfTheDepsWillChange(dep1, dep2);
        }, [dep1, dep2])
        // ...
    }

    4. When Component Unmounts:-

    To clean up (remove event listeners or stop data fetching with a side effect) after the component unmounts, a return statement with a function should be added inside the useEffect() hook.
    function MyComponent() {
        // ...
        React.useEffect(() => {
            document.addEventListener();

            return () => {
                document.removeEventListener();
            }
        }, [])
        // ...
    }

    These can also be combined into one useEffect:

    useEffect(() => {
        doSomethingOnMount();
        return () => {
            doSomethingOnUnmount();
        }
    }, [])
    This process is called effect clean up, you can read more from the documentation.

